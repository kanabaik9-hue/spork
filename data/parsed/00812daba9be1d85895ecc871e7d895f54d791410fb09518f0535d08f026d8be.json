{"url": "http://docs.python.org/3/tutorial/introduction.html#using-python-as-a-calculator", "title": "3. An Informal Introduction to Python \u2014 Python 3.13.7 documentation", "headings": ["Table of Contents", "This page", "Navigation", "3. An Informal Introduction to Python\u00b6", "3.1. Using Python as a Calculator\u00b6", "3.1.1. Numbers\u00b6", "3.1.2. Text\u00b6", "3.1.3. Lists\u00b6", "3.2. First Steps Towards Programming\u00b6", "Table of Contents", "This page", "Navigation"], "body": "2. Using the Python Interpreter 4. More Control Flow Tools In the following examples, input and output are distinguished by the presence or\nabsence of prompts (>>> and \u2026): to repeat the example, you must type\neverything after the prompt, when the prompt appears; lines that do not begin\nwith a prompt are output from the interpreter. Note that a secondary prompt on a\nline by itself in an example means you must type a blank line; this is used to\nend a multi-line command. You can use the \u201cCopy\u201d button (it appears in the upper-right corner\nwhen hovering over or tapping a code example), which strips prompts\nand omits output, to copy and paste the input lines into your interpreter. Many of the examples in this manual, even those entered at the interactive\nprompt, include comments.  Comments in Python start with the hash character,\n#, and extend to the end of the physical line.  A comment may appear at the\nstart of a line or following whitespace or code, but not within a string\nliteral.  A hash character within a string literal is just a hash character.\nSince comments are to clarify code and are not interpreted by Python, they may\nbe omitted when typing in examples. Some examples: Let\u2019s try some simple Python commands.  Start the interpreter and wait for the\nprimary prompt, >>>.  (It shouldn\u2019t take long.) The interpreter acts as a simple calculator: you can type an expression at it\nand it will write the value.  Expression syntax is straightforward: the\noperators +, -, * and / can be used to perform\narithmetic; parentheses (()) can be used for grouping.\nFor example: The integer numbers (e.g. 2, 4, 20) have type int,\nthe ones with a fractional part (e.g. 5.0, 1.6) have type\nfloat.  We will see more about numeric types later in the tutorial. Division (/) always returns a float.  To do floor division and\nget an integer result you can use the // operator; to calculate\nthe remainder you can use %: With Python, it is possible to use the ** operator to calculate powers [1]: The equal sign (=) is used to assign a value to a variable. Afterwards, no\nresult is displayed before the next interactive prompt: If a variable is not \u201cdefined\u201d (assigned a value), trying to use it will\ngive you an error: There is full support for floating point; operators with mixed type operands\nconvert the integer operand to floating point: In interactive mode, the last printed expression is assigned to the variable\n_.  This means that when you are using Python as a desk calculator, it is\nsomewhat easier to continue calculations, for example: This variable should be treated as read-only by the user.  Don\u2019t explicitly\nassign a value to it \u2014 you would create an independent local variable with the\nsame name masking the built-in variable with its magic behavior. In addition to int and float, Python supports other types of\nnumbers, such as Decimal and Fraction.\nPython also has built-in support for complex numbers,\nand uses the j or J suffix to indicate the imaginary part\n(e.g. 3+5j). Python can manipulate text (represented by type str, so-called\n\u201cstrings\u201d) as well as numbers.  This includes characters \u201c!\u201d, words\n\u201crabbit\u201d, names \u201cParis\u201d, sentences \u201cGot your back.\u201d, etc.\n\u201cYay! :)\u201d. They can be enclosed in single quotes ('...') or double\nquotes (\"...\") with the same result [2]. To quote a quote, we need to \u201cescape\u201d it, by preceding it with \\.\nAlternatively, we can use the other type of quotation marks: In the Python shell, the string definition and output string can look\ndifferent.  The print() function produces a more readable output, by\nomitting the enclosing quotes and by printing escaped and special characters: If you don\u2019t want characters prefaced by \\ to be interpreted as\nspecial characters, you can use raw strings by adding an r before\nthe first quote: There is one subtle aspect to raw strings: a raw string may not end in\nan odd number of \\ characters; see\nthe FAQ entry for more information\nand workarounds. String literals can span multiple lines.  One way is using triple-quotes:\n\"\"\"...\"\"\" or '''...'''.  End-of-line characters are automatically\nincluded in the string, but it\u2019s possible to prevent this by adding a \\ at\nthe end of the line.  In the following example, the initial newline is not\nincluded: Strings can be concatenated (glued together) with the + operator, and\nrepeated with *: Two or more string literals (i.e. the ones enclosed between quotes) next\nto each other are automatically concatenated. This feature is particularly useful when you want to break long strings: This only works with two literals though, not with variables or expressions: If you want to concatenate variables or a variable and a literal, use +: Strings can be indexed (subscripted), with the first character having index 0.\nThere is no separate character type; a character is simply a string of size\none: Indices may also be negative numbers, to start counting from the right: Note that since -0 is the same as 0, negative indices start from -1. In addition to indexing, slicing is also supported.  While indexing is used\nto obtain individual characters, slicing allows you to obtain a substring: Slice indices have useful defaults; an omitted first index defaults to zero, an\nomitted second index defaults to the size of the string being sliced. Note how the start is always included, and the end always excluded.  This\nmakes sure that s[:i] + s[i:] is always equal to s: One way to remember how slices work is to think of the indices as pointing\nbetween characters, with the left edge of the first character numbered 0.\nThen the right edge of the last character of a string of n characters has\nindex n, for example: The first row of numbers gives the position of the indices 0\u20266 in the string;\nthe second row gives the corresponding negative indices. The slice from i to\nj consists of all characters between the edges labeled i and j,\nrespectively. For non-negative indices, the length of a slice is the difference of the\nindices, if both are within bounds.  For example, the length of word[1:3] is\n2. Attempting to use an index that is too large will result in an error: However, out of range slice indexes are handled gracefully when used for\nslicing: Python strings cannot be changed \u2014 they are immutable.\nTherefore, assigning to an indexed position in the string results in an error: If you need a different string, you should create a new one: The built-in function len() returns the length of a string: See also Strings are examples of sequence types, and support the common\noperations supported by such types. Strings support a large number of methods for\nbasic transformations and searching. String literals that have embedded expressions. Information about string formatting with str.format(). The old formatting operations invoked when strings are\nthe left operand of the % operator are described in more detail here. Python knows a number of compound data types, used to group together other\nvalues.  The most versatile is the list, which can be written as a list of\ncomma-separated values (items) between square brackets.  Lists might contain\nitems of different types, but usually the items all have the same type. Like strings (and all other built-in sequence types), lists can be\nindexed and sliced: Lists also support operations like concatenation: Unlike strings, which are immutable, lists are a mutable\ntype, i.e. it is possible to change their content: You can also add new items at the end of the list, by using\nthe list.append() method (we will see more about methods later): Simple assignment in Python never copies data. When you assign a list\nto a variable, the variable refers to the existing list.\nAny changes you make to the list through one variable will be seen\nthrough all other variables that refer to it.: All slice operations return a new list containing the requested elements.  This\nmeans that the following slice returns a\nshallow copy of the list: Assignment to slices is also possible, and this can even change the size of the\nlist or clear it entirely: The built-in function len() also applies to lists: It is possible to nest lists (create lists containing other lists), for\nexample: Of course, we can use Python for more complicated tasks than adding two and two\ntogether.  For instance, we can write an initial sub-sequence of the\nFibonacci series\nas follows: This example introduces several new features. The first line contains a multiple assignment: the variables a and b\nsimultaneously get the new values 0 and 1.  On the last line this is used again,\ndemonstrating that the expressions on the right-hand side are all evaluated\nfirst before any of the assignments take place.  The right-hand side expressions\nare evaluated  from the left to the right. The while loop executes as long as the condition (here: a < 10)\nremains true.  In Python, like in C, any non-zero integer value is true; zero is\nfalse.  The condition may also be a string or list value, in fact any sequence;\nanything with a non-zero length is true, empty sequences are false.  The test\nused in the example is a simple comparison.  The standard comparison operators\nare written the same as in C: < (less than), > (greater than), ==\n(equal to), <= (less than or equal to), >= (greater than or equal to)\nand != (not equal to). The body of the loop is indented: indentation is Python\u2019s way of grouping\nstatements.  At the interactive prompt, you have to type a tab or space(s) for\neach indented line.  In practice you will prepare more complicated input\nfor Python with a text editor; all decent text editors have an auto-indent\nfacility.  When a compound statement is entered interactively, it must be\nfollowed by a blank line to indicate completion (since the parser cannot\nguess when you have typed the last line).  Note that each line within a basic\nblock must be indented by the same amount. The print() function writes the value of the argument(s) it is given.\nIt differs from just writing the expression you want to write (as we did\nearlier in the calculator examples) in the way it handles multiple arguments,\nfloating-point quantities, and strings.  Strings are printed without quotes,\nand a space is inserted between items, so you can format things nicely, like\nthis: The keyword argument end can be used to avoid the newline after the output,\nor end the output with a different string: Footnotes Since ** has higher precedence than -, -3**2 will be\ninterpreted as -(3**2) and thus result in -9.  To avoid this\nand get 9, you can use (-3)**2. Unlike other languages, special characters such as \\n have the\nsame meaning with both single ('...') and double (\"...\") quotes.\nThe only difference between the two is that within single quotes you don\u2019t\nneed to escape \" (but you have to escape \\') and vice versa. 2. Using the Python Interpreter 4. More Control Flow Tools", "tokens": ["use", "python", "interpreter", "control", "flow", "tools", "follow", "example", "input", "output", "distinguish", "presence", "absence", "prompt", "repeat", "example", "type", "prompt", "prompt", "appear", "line", "begin", "prompt", "output", "interpreter", "note", "secondary", "prompt", "line", "example", "mean", "type", "blank", "line", "use", "end", "multi", "line", "command", "use", "copy", "button", "appear", "upper", "right", "corner", "hover", "tap", "code", "example", "strip", "prompt", "omit", "output", "copy", "paste", "input", "line", "interpreter", "example", "manual", "enter", "interactive", "prompt", "include", "comment", "comment", "python", "start", "hash", "character", "extend", "end", "physical", "line", "comment", "appear", "start", "line", "follow", "whitespace", "code", "string", "literal", "hash", "character", "string", "literal", "hash", "character", "comment", "clarify", "code", "interpret", "python", "omit", "type", "example", "example", "let", "try", "simple", "python", "command", "start", "interpreter", "wait", "primary", "prompt", "long", "interpreter", "act", "simple", "calculator", "type", "expression", "write", "value", "expression", "syntax", "straightforward", "operator", "use", "perform", "arithmetic", "parenthesis", "use", "grouping", "example", "integer", "number", "type", "int", "fractional", "type", "float", "numeric", "type", "later", "tutorial", "division", "return", "float", "floor", "division", "integer", "result", "use", "operator", "calculate", "remainder", "use", "python", "possible", "use", "operator", "calculate", "power", "equal", "sign", "use", "assign", "value", "variable", "result", "display", "interactive", "prompt", "variable", "define", "assign", "value", "try", "use", "error", "support", "float", "point", "operator", "mixed", "type", "operand", "convert", "integer", "operand", "float", "point", "interactive", "mode", "print", "expression", "assign", "variable", "mean", "use", "python", "desk", "calculator", "somewhat", "easy", "continue", "calculation", "example", "variable", "treat", "read", "user", "explicitly", "assign", "value", "create", "independent", "local", "variable", "mask", "build", "variable", "magic", "behavior", "addition", "int", "float", "python", "support", "type", "number", "decimal", "fraction", "python", "build", "support", "complex", "number", "use", "j", "j", "suffix", "indicate", "imaginary", "python", "manipulate", "text", "represent", "type", "str", "string", "number", "include", "character", "word", "rabbit", "paris", "sentence", "got", "etc", "yay", "enclose", "single", "quote", "double", "quote", "result", "quote", "quote", "need", "escape", "precede", "alternatively", "use", "type", "quotation", "mark", "python", "shell", "string", "definition", "output", "string", "look", "different", "print", "function", "produce", "readable", "output", "omit", "enclose", "quote", "print", "escape", "special", "character", "want", "character", "preface", "interpret", "special", "character", "use", "raw", "string", "add", "r", "quote", "subtle", "aspect", "raw", "string", "raw", "string", "end", "odd", "number", "character", "faq", "entry", "information", "workaround", "string", "literal", "span", "multiple", "line", "way", "use", "triple", "quote", "end", "line", "character", "automatically", "include", "string", "possible", "prevent", "add", "end", "line", "follow", "example", "initial", "newline", "include", "string", "concatenate", "glue", "operator", "repeat", "string", "literal", "enclose", "quote", "automatically", "concatenate", "feature", "particularly", "useful", "want", "break", "long", "string", "work", "literal", "variable", "expression", "want", "concatenate", "variable", "variable", "literal", "use", "string", "index", "subscripte", "character", "index", "separate", "character", "type", "character", "simply", "string", "size", "index", "negative", "number", "start", "count", "right", "note", "negative", "index", "start", "addition", "indexing", "slicing", "support", "indexing", "use", "obtain", "individual", "character", "slice", "allow", "obtain", "substring", "slice", "index", "useful", "default", "omit", "index", "default", "zero", "omit", "second", "index", "default", "size", "string", "slice", "note", "start", "include", "end", "exclude", "sure", "equal", "s", "way", "remember", "slice", "work", "think", "index", "point", "character", "left", "edge", "character", "number", "right", "edge", "character", "string", "n", "character", "index", "n", "example", "row", "number", "position", "index", "string", "second", "row", "corresponding", "negative", "index", "slice", "j", "consist", "character", "edge", "label", "j", "respectively", "non", "negative", "index", "length", "slice", "difference", "index", "bound", "example", "length", "attempt", "use", "index", "large", "result", "error", "range", "slice", "index", "handle", "gracefully", "use", "slicing", "python", "string", "change", "immutable", "assign", "index", "position", "string", "result", "error", "need", "different", "string", "create", "new", "build", "function", "len", "return", "length", "string", "string", "example", "sequence", "type", "support", "common", "operation", "support", "type", "string", "support", "large", "number", "method", "basic", "transformation", "search", "string", "literal", "embed", "expression", "information", "string", "format", "old", "formatting", "operation", "invoke", "string", "left", "operand", "operator", "describe", "detail", "python", "know", "number", "compound", "datum", "type", "use", "group", "value", "versatile", "list", "write", "list", "comma", "separate", "value", "item", "square", "bracket", "list", "contain", "item", "different", "type", "usually", "item", "type", "like", "string", "build", "sequence", "type", "list", "index", "slice", "list", "support", "operation", "like", "concatenation", "unlike", "string", "immutable", "list", "mutable", "type", "possible", "change", "content", "add", "new", "item", "end", "list", "use", "method", "method", "later", "simple", "assignment", "python", "copy", "datum", "assign", "list", "variable", "variable", "refer", "exist", "list", "change", "list", "variable", "variable", "refer", "slice", "operation", "return", "new", "list", "contain", "request", "element", "mean", "follow", "slice", "return", "shallow", "copy", "list", "assignment", "slice", "possible", "change", "size", "list", "clear", "entirely", "build", "function", "len", "apply", "list", "possible", "nest", "list", "create", "list", "contain", "list", "example", "course", "use", "python", "complicated", "task", "add", "instance", "write", "initial", "sub", "sequence", "fibonacci", "series", "follow", "example", "introduce", "new", "feature", "line", "contain", "multiple", "assignment", "variable", "b", "simultaneously", "new", "value", "line", "use", "demonstrate", "expression", "right", "hand", "evaluate", "assignment", "place", "right", "hand", "expression", "evaluate", "left", "right", "loop", "execute", "long", "condition", "remain", "true", "python", "like", "c", "non", "zero", "integer", "value", "true", "zero", "false", "condition", "string", "list", "value", "fact", "sequence", "non", "zero", "length", "true", "sequence", "false", "test", "use", "example", "simple", "comparison", "standard", "comparison", "operator", "write", "c", "great", "equal", "equal", "great", "equal", "equal", "body", "loop", "indent", "indentation", "python", "way", "group", "statement", "interactive", "prompt", "type", "tab", "indented", "line", "practice", "prepare", "complicated", "input", "python", "text", "editor", "decent", "text", "editor", "auto", "indent", "facility", "compound", "statement", "enter", "interactively", "follow", "blank", "line", "indicate", "completion", "parser", "guess", "type", "line", "note", "line", "basic", "block", "indent", "print", "function", "write", "value", "differ", "write", "expression", "want", "write", "early", "calculator", "example", "way", "handle", "multiple", "argument", "float", "point", "quantity", "string", "string", "print", "quote", "space", "insert", "item", "format", "thing", "nicely", "like", "keyword", "argument", "end", "use", "avoid", "newline", "output", "end", "output", "different", "string", "footnote", "high", "precedence", "interpret", "result", "avoid", "use", "unlike", "language", "special", "character", "meaning", "single", "double", "quote", "difference", "single", "quote", "need", "escape", "escape", "vice", "versa", "use", "python", "interpreter", "control", "flow", "tools"], "metadata": {"url": "http://docs.python.org/3/tutorial/introduction.html#using-python-as-a-calculator", "title": "3. An Informal Introduction to Python \u2014 Python 3.13.7 documentation", "headings": ["Table of Contents", "This page", "Navigation", "3. An Informal Introduction to Python\u00b6", "3.1. Using Python as a Calculator\u00b6", "3.1.1. Numbers\u00b6", "3.1.2. Text\u00b6", "3.1.3. Lists\u00b6", "3.2. First Steps Towards Programming\u00b6", "Table of Contents", "This page", "Navigation"], "content_length": 10809, "lang": "en", "canonical_url": "https://docs.python.org/3/tutorial/introduction.html", "outbound_links": ["https://www.python.org/", "../contents.html", "#", "#using-python-as-a-calculator", "#numbers", "#text", "#lists", "#first-steps-towards-programming", "interpreter.html", "controlflow.html", "../bugs.html", "https://github.com/python/cpython/blob/main/Doc/tutorial/introduction.rst?plain=1", "../genindex.html", "../py-modindex.html", "controlflow.html", "interpreter.html", "https://www.python.org/", "../index.html", "index.html", "", "#an-informal-introduction-to-python", "../glossary.html#term-0", "../glossary.html#term-...", "#using-python-as-a-calculator", "#numbers", "../library/functions.html#int", "../library/functions.html#float", "../glossary.html#term-floor-division", "#id3", "../library/functions.html#int", "../library/functions.html#float", "../library/decimal.html#decimal.Decimal", "../library/fractions.html#fractions.Fraction", "../library/stdtypes.html#typesnumeric", "#text", "../library/stdtypes.html#str", "#id4", "../library/functions.html#print", "../faq/programming.html#faq-programming-raw-string-backslash", "../glossary.html#term-immutable", "../library/functions.html#len", "../library/stdtypes.html#textseq", "../library/stdtypes.html#string-methods", "../reference/lexical_analysis.html#f-strings", "../library/string.html#formatstrings", "../library/stdtypes.html#str.format", "../library/stdtypes.html#old-string-formatting", "#lists", "../glossary.html#term-sequence", "../glossary.html#term-immutable", "../glossary.html#term-mutable", "../library/copy.html#shallow-vs-deep-copy", "../library/functions.html#len", "#first-steps-towards-programming", "https://en.wikipedia.org/wiki/Fibonacci_sequence", "../reference/compound_stmts.html#while", "../library/functions.html#print", "#id1", "#id2", "../contents.html", "#", "#using-python-as-a-calculator", "#numbers", "#text", "#lists", "#first-steps-towards-programming", "interpreter.html", "controlflow.html", "../bugs.html", "https://github.com/python/cpython/blob/main/Doc/tutorial/introduction.rst?plain=1", "../genindex.html", "../py-modindex.html", "controlflow.html", "interpreter.html", "https://www.python.org/", "../index.html", "index.html", "", "../copyright.html", "/license.html", "https://www.python.org/psf/donations/", "/bugs.html", "https://www.sphinx-doc.org/"]}}